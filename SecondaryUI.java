import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * a class for managing the secondary UI
 *
 * @author Niel
 */
public class SecondaryUI extends javax.swing.JFrame {

    int processedFileNo, numberOfFiles, totalShapes, totalCircle, totalSmall, totalMed, totalLarge;
    ImageAnalysis analysis;

    /**
     * Creates new form SecondaryUI initializes it with the data from the
     * analysis run
     *
     * @param ia the image analysis object, used to close the images window
     * @param stats array of the stats from the run
     */
    public SecondaryUI(ImageAnalysis ia, int[] stats) {
        numberOfFiles = stats[0];
        totalShapes = stats[1];
        totalCircle = stats[2];
        totalSmall = stats[3];
        totalMed = stats[4];
        totalLarge = stats[5];

        analysis = ia;

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocation(560, 20);

        initComponents();

        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        processedImageLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        total = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        totalCircles = new javax.swing.JLabel();
        smallCircles = new javax.swing.JLabel();
        medCircles = new javax.swing.JLabel();
        largeCircles = new javax.swing.JLabel();
        circleLabel = new javax.swing.JLabel();
        smallLabel = new javax.swing.JLabel();
        medLabel = new javax.swing.JLabel();
        largeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        viewButton.setText("View processed images");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next >>");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        prevButton.setText("<< Previous");
        prevButton.setEnabled(false);
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        total.setText("Total number of shapes:");

        totalLabel.setText(totalShapes +"");

        totalCircles.setText("Circles:");

        smallCircles.setText("Small circles:");

        medCircles.setText("Medium circles:");

        largeCircles.setText("Large circles:");

        circleLabel.setText(totalCircle +"");

        smallLabel.setText(totalSmall +"");

        medLabel.setText(totalMed +"");

        largeLabel.setText(totalLarge +"");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(nextButton))
                    .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(total)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(totalLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(prevButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(totalCircles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(circleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(smallCircles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(smallLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(medCircles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(medLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(largeCircles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(largeLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processedImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(processedImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(total)
                            .addComponent(totalLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalCircles)
                            .addComponent(circleLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(smallCircles)
                            .addComponent(smallLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medCircles)
                            .addComponent(medLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(largeCircles)
                            .addComponent(largeLabel))
                        .addGap(61, 61, 61)
                        .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * shows the resultant output image from the stream
     *
     * @param evt
     */
    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed

        if (analysis == null) {
            JOptionPane.showMessageDialog(this, "First select an image stream");
        } else {

            processedFileNo = 1;
            try {
                BufferedImage processedImage = ImageIO.read(new File("processed_images/processed" + processedFileNo + ".jpg"));

                processedImageLabel.setIcon(new ImageIcon(processedImage));

                nextButton.setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(SecondaryUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_viewButtonActionPerformed
    /**
     * shows the next image stops at the end of the number of files
     *
     * @param evt
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (processedFileNo < numberOfFiles) {
            BufferedImage processedImage;
            try {
                processedFileNo++;
                processedImage = ImageIO.read(new File("processed_images/processed" + processedFileNo + ".jpg"));
                processedImageLabel.setIcon(new ImageIcon(processedImage));
                prevButton.setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(SecondaryUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            nextButton.setEnabled(false);
        }
    }//GEN-LAST:event_nextButtonActionPerformed
    /**
     * shows the previous image stops at 1
     *
     * @param evt
     */
    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        if (processedFileNo > 1) {
            BufferedImage processedImage;
            try {
                processedFileNo--;
                processedImage = ImageIO.read(new File("processed_images/processed" + processedFileNo + ".jpg"));
                processedImageLabel.setIcon(new ImageIcon(processedImage));

                nextButton.setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(SecondaryUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            prevButton.setEnabled(false);
        }
    }//GEN-LAST:event_prevButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel circleLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel largeCircles;
    private javax.swing.JLabel largeLabel;
    private javax.swing.JLabel medCircles;
    private javax.swing.JLabel medLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JLabel processedImageLabel;
    private javax.swing.JLabel smallCircles;
    private javax.swing.JLabel smallLabel;
    private javax.swing.JLabel total;
    private javax.swing.JLabel totalCircles;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
